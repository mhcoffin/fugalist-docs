[{"id":0,"href":"/doc/docs/getting-started/","title":"Getting Started","section":"Docs","content":"Getting Started #  Lurking #  If you just want to lurk, you don\u0026rsquo;t need an account. You can read the forum or download shared expression maps.\nAccounts #  If you decide you want to post on the forum or create expression maps, then you need an account. Accounts are free.\nFugalist is a hobby, not a business. We may, at some point in the future, decide to run ads on Fugalist to offset hosting costs.  Fugalist uses a no-password sign-in. Enter your email address; Fugalist will send a sign-in link. Click the link and you should be signed in. You should remain signed on that device until you explicitly sign out. If you accidentally get signed out, or if you want to use the same account on a different device, just ask for another sign-in link.\nFugalist won\u0026rsquo;t use your email for any other purpose than sending sign-in links. We won\u0026rsquo;t reveal or sell your email address.  "},{"id":1,"href":"/doc/docs/tool/assignment-tab/header/","title":"Header","section":"Assignment Tab","content":"The Assignment Table Header #  The assignment-table header shows all the playing techniques that the expression map supports and how they are grouped.\nEach column is called an axis.\n The first axis (Length) consists of the Dorico playing techniques that indicate note duration: Normal, Staccato, Staccatissimo, Tenuto, and Staccato-tenuto. The second axis (Legato) consists of Normal and Legato. The third axis (Vibrato) consists of Normal and Non vibrato. The fourth axis (Attack) consists of Normal and Marcato. Finally, Technique, which contains only Normal for now.  Every axis has a Normal technique. Normal is not an actual playing technique. Normal means \u0026ldquo;no other playing technique from this group is active\u0026rdquo;. For example, under Length, Normal means \u0026ldquo;none of staccato, staccatissimo, tenuto, or staccato-tenuto are active.\u0026rdquo;  The last column of the header allows you to do bulk sound assignment, which will be covered later.\nEditing Playing Techniques #  Clicking on the name of the column opens a dialog that lets you edit that group of playing techniques:\nHere you can\n change the name of the axis add or delete playing techniques from the axis move the axis left or right if that makes more sense to you add a new axis delete an axis.  Fugalist provides a default set of axes to get started but, at minimum, you will probably want to add to the Techniques axis additional playing techniques specific to the instrument.\n"},{"id":2,"href":"/doc/docs/introduction/","title":"Introduction","section":"Docs","content":"What is an expression map? #  Here\u0026rsquo;s my definition:\n An expression map takes in the information that can be gleaned about a note from a musical score\u0026mdash;pitch, duration, relative volume, playing techniques, etc.\u0026mdash;and produces MIDI signals to play the note more or less as human would play it, but on a VST instrument.\n If that statement doesn\u0026rsquo;t leave any questions in your mind, don\u0026rsquo;t waste your time here: skip ahead to the next section.\n"},{"id":3,"href":"/doc/docs/tool/overview-tab/","title":"Overview Tab","section":"Expression-map Builder","content":"The Overview Tab #  Use the overview tab to specify metadata about the expression map: who created it, what\u0026rsquo;s it for, etc.\nSome of the fields from this tab are put into the generated Dorico expression map. Other fields are not part of the expression map itself, but are used to help others find your expression map if you choose to share it.\nThis tab is also the place to go to download or share your expression map.\nHere\u0026rsquo;s an example of an overview:\n"},{"id":4,"href":"/doc/docs/tool/overview-tab/fields/","title":"Fields","section":"Overview Tab","content":"Overview Fields #  Project ID. #  A unique identifier for this project, generated by Fugalist.\nCreated #  The time the project was created, generated by Fugalist.\nCurrent version #  Fugalist automatically updates the version when you share your expression map.\nIf you have never shared, the version will be 1.\nWhen (if) you share the first time, version 1 is shared, and the \u0026ldquo;current\u0026rdquo; version is immediately incremented to 2. Further modification will go into version 2 (not yet shared). If you subsequently share version 2, the \u0026ldquo;current\u0026rdquo; version will be incremented to 3, and so forth.\nLast modified #  The last time you changed anything in this expression map. This changes whenever you modify anything.\nLast shared #  The last time you shared this expression map.\nName #  Your name for this expression map. This is the name included in the generated Dorico expression map.\nDescription #  Your description of the expression map. This will be included in the generated Dorico expression map. It is also visible to others if you share the expression map.\nPlugins #  What plugins this expression map is for. As with the description, this is included in the generated Dorico expression map, and is visible to others if you share.\nBest practice: use the exact name of the sample-library preset if one exists. That way there\u0026rsquo;s no ambiguity about what the expression map is for.  Vendor #  The vendor of the sample library. This is not included in the generated expression map. If you share, it\u0026rsquo;s visible to people looking for an expression map.\nInstruments #  The instrument or instruments this expression map applies to: guitar, violin, etc. This is not included in the generated expression map. If you share, it\u0026rsquo;s visible to people looking for an expression map.\nOther search tags #  To make it easier for other people to find shared expression maps, you can include other relevant search terms here.\nDemos #  You can upload audio demos of your expression map in action. Useful for people looking for an expression map. You can also upload a PDF score for your demo. Bug: currently the Dorico score isn\u0026rsquo;t visible to users looking for shared expression maps.  "},{"id":5,"href":"/doc/docs/tool/vst-tab/base/","title":"Base Sounds","section":"VST Sounds Tab","content":"Base Sounds #  This is where you enter the sounds you want to use from your VST instrument. To add a new sound, click the + sign and fill in the blanks:\nName #  Give the sound a name that you\u0026rsquo;ll recognize later. It will show up on the Assignment tab.\nStart #  Add the MIDI events to send to start the sound, separated by commas. See Specifying MIDI events for details of how to write MIDI events.\nStop events #  These MIDI events are sent to stop the sound. See Specifying MIDI events for details of how to write MIDI events.\nDynamics #  You can specify either note velocity or a continuous controller (CC) to control velocity:\nVelocity #  Just use the word \u0026ldquo;velocity\u0026rdquo;, optionally followed by an optional range. Examples:\nvelocity velocity 10:120  Continuous controller #  Examples:\nCC3 cc17 10:120  "},{"id":6,"href":"/doc/docs/tool/assignment-tab/body/","title":"Body","section":"Assignment Tab","content":"Assignment Tab Body #  The body of the tab is just a bunch of rows, one for each combination of the playing techniques. If you add or delete playing techniques, or rearrange the grouping, the rows of the table body will change to reflect that.\nHere is one row:\nThe first five columns represent a particular combination of playing techniques. This example row will apply to any note where the active playing techniques are exactly non vibrato and marcato. (Remember that Normal means the absence of any explicitly specified playing technique.) The last column is a drop-down where you can pick any of the VST sounds or composite sounds that you\u0026rsquo;ve defined earlier. In this case, the VST contains a marcato non-vibrato patch, so I used that. The result will be that Dorico will play a note labeled with non vibrato and marcato using the start and stop MIDI events specified for the marcato non-vibrato sound.\nOne (very tedious) way to create an expression map would be to go through every row of the table, examine the playing techniques, select a VST or Composite sound, and assign it. But frequently we can do better than that.\n"},{"id":7,"href":"/doc/docs/tool/","title":"Expression-map Builder","section":"Docs","content":"Expression-map builder #  The Fugalist expression-map builder is an on-line tool for creating expression maps. The intent is to simplify and streamline expression-map creation.\nFugalist stores your data in the cloud, so to use it you have to be on-line and signed in to Fugalist.  The builder consists of four browser tabs to deal with different aspects of building an expression map:\n  The Overview tab is where you enter metadata such as the expression-map name, instrument, VST library vendor, audio demos, etc.\n  The VST Sounds tab is where you specify the VST patches you want to use from your sample library. For each patch you want to use, you provide a name of your choosing, the on- and off-events, and the volume dynamic.\n  The Composite sounds tab deals with note-length conditions, length factors, and transpositions. (For many sample libraries, you can skip this tab entirely.)\n  The Assignment Tab is a fancy version of the table described in the previous section. Using this tab, you can specify which techniques you want to support and how to group them. Then, for each combination of playing techniques, you can assign a sound, either from the VST Sounds tab or the Composite sounds tab.\nYou can make sound assignments one row at a time, or you can select many rows at once (using technique filters) and assign a sound to all those rows.\n  The next sections go into more detail on each tab.\n"},{"id":8,"href":"/doc/docs/tool/vst-tab/","title":"VST Sounds Tab","section":"Expression-map Builder","content":"The VST Sounds tab #  The VST tab is for entering VST sounds. It contains a section for base sounds and one for add-ons.\n"},{"id":9,"href":"/doc/docs/tool/overview-tab/actions/","title":"Actions","section":"Overview Tab","content":"Action Buttons #  Download #  This button downloads the latest version of the generated Dorico expression map to your local machine. If you\u0026rsquo;ve made changes since the last download, it regenerates the map. If not, you get the same one as last time.\nCopy URL to clipboard #  This button copies the URL of the latest version of the generated Dorico expression map. If you\u0026rsquo;ve made changes since the last download, it regenerates the map. The URL remains the same for any single version of the expression map. The URL changes when the version changes.\nThe URL is difficult to guess, but it\u0026rsquo;s not private. If you give the URL to a friend, they can download your expression map. They can also pass the URL on to others, who will also be able to download it.  Share #  This button shares current state of your expression map and then increments the version. The shared expression map will show up in the Fugalist search page, so anyone can find it and download it.\nTo share, you must have filled in a name, description, vendor, and instruments.\nEven after you share, the previous shared version is still there, with the old URL. Bug: currently, Fugalist doesn\u0026rsquo;t provide a direct way to get the URL of old versions of a shared expression map.  Un-share #  If you have shared a version and suddenly realize that you\u0026rsquo;ve made a horrible mistake that you don\u0026rsquo;t want anyone to see, you can un-share. This doesn\u0026rsquo;t actually delete anything, but it fixes things so that people browsing for maps won\u0026rsquo;t see your expression map until you share again (with a new version and URL).\n"},{"id":10,"href":"/doc/docs/tool/vst-tab/add-ons/","title":"Add Ons","section":"VST Sounds Tab","content":"Add-on Techniques #  Sometimes the planets align: your VST instrument will have a control that is\n independent of all the others, and corresponds exactly to a Dorico playing technique.  If this happens, you\u0026rsquo;re in luck.\nExample, you may find a VST instrument that uses CC3 to control attack. Low values mean gentle attack, high values mean marcato attack. Regardless of what else is going on, CC3 controls note attack.\nYou win. You can define an Add-On:\nSelect the Dorico playing technique (Marcato) from the dropdown. Then add the MIDI controls that will turn the effects on and off. Dorico will set CC3 to 127 before playing a marcato note, and set it back to 64 for non-marcato notes. It will do that no matter what else is going on.\nThe beauty of this is that marcato is now taken care of once and for all. When you get to the sound-assignment tab, you can just delete the Attack axis, which cuts the size of the expression map in half and saves hassle, too.\n"},{"id":11,"href":"/doc/docs/tool/composite-tab/","title":"Composite Sounds","section":"Expression-map Builder","content":"The Composite Sounds Tab #  The composite sounds tab provides support for\n note-length conditions length adjustments octave transpositions  A composite sound can have multiple branches that depend on note-length conditions. Here is an example:\nIf you assign this composite sound (Sustain) to some combination of playing techniques then, when Dorico plays a note with those techniques, it will decide whether to use a staccato sound or a sustain based the duration of the note.\nWhen you create a composite sound (by clicking +) a single branch is created. You can add other branches to the composite sound by clicking + on the right.\n"},{"id":12,"href":"/doc/docs/tool/assignment-tab/filters/","title":"Playing-technique filters","section":"Assignment Tab","content":"Playing Technique Filters #  The column header of the Length axis looks like this:\nWe saw earlier that clicking on the button labeled Length opens the axis-editor dialog. Clicking on a playing technique such as staccato toggles the visibility of table rows containing that technique. I.e., if you toggle Staccato off, all the rows containing Staccato will be hidden. If you toggle it on, they become visible again.\nYou can toggle each playing technique individually. For example, if you toggle off everything except Tenuto in the Length axis and toogle off everything except Legato in the Legato axis, only rows that contain both Tenuto and Legato will remain visible.\n(If you want to pick exactly one playing technique from an axis, you can double-click it. It will be toggled on, and all the others in that axis will be toggled off. The reset button toggles all the playing techniques to on.)\nAdjusting the playing technique filters is a convenient way to narrow in on a particular set of rows. For example, suppose your sample library has a \u0026ldquo;harsh staccato\u0026rdquo; staccato patch. You might want to use that patch for at least some combinations that contain Marcato along with either Staccato or Staccatissimo. Instead of scrolling around looking for applicable rows, with a few clicks you can focus in on exactly the rows that have those playing techniques and then decide what to do.\n"},{"id":13,"href":"/doc/docs/tool/assignment-tab/","title":"Assignment Tab","section":"Expression-map Builder","content":"The Assignment Tab #  The assignment is basically a fancy version of the tiny example shown earlier.\nHere\u0026rsquo;s a truncated example of a real assignment tab:\n"},{"id":14,"href":"/doc/docs/tool/vst-tab/midi/","title":"MIDI Event Syntax","section":"VST Sounds Tab","content":"Specifying MIDI Events #  MIDI Key Switch #  A MIDI key switch can be specified either as a note number (0-127) or a chromatic note plus an octave.\nMIDI Note Number #  To specify a MIDI note number, just prefix the number with KS:\nKS3 ks13 ks 7  The default velocity is 127. If you need to specify a different velocity, you can specify the velocity after an \u0026ldquo;=\u0026rdquo; sign. Examples:\nKS3=2 ks13=125 ks 7 = 13  Keyboard Note #  A chromatic note with an octave number:\nC0 d#2 f 3  (Sharps are supported but not flats.)\nMiddle C is by default C4. If your VST vendor has a different opinion, you can open the Options toggle at the top of the page and choose a different octave.  As with note numbers, the default velocity is 127. If you need to change that, you can include the velocity after an \u0026ldquo;=\u0026rdquo; sign:\nC#3 = 64 C0=120  CC Values #  To set a continuous controller to a particular value:\nCC3=17 cc3 = 14  CC Ranges #  Some VST instruments use a CC to choose between several options. E.g., CC3 might be used to make a six-way choice. The first 1/6 of the range, approximately 0-21, picks the first choice; the second 1/6 of the range, approximately 22-42, picks the second choice; and so on.\nIf there are more than two or three choices, it becomes error-prone to pick a value in the correct range. Fugalist supports an alternative notation:\nCC3 = 4/6  This will divide the range 0-127 into six parts and pick a value that falls in the middle of the fourth range.\nProgram change #  A program change:\nPC13 pc 12  "},{"id":15,"href":"/doc/docs/tool/assignment-tab/bulk/","title":"Bulk Assignment","section":"Assignment Tab","content":"Bulk Assignment #  Frequently, after narrowing visible rows down, you want to apply the same sound to all the visible rows. To continue the example from the previous section, you might want to assign \u0026ldquo;harsh staccato\u0026rdquo; to all the rows that have marcato in addition to either staccato or staccatissimo. Bulk sound assignment lets you do that.\nThe rightmost header in the assignment tab looks like this:\nThe top dropdown (initially blank) lets you pick any VST or Composite sound that you\u0026rsquo;ve defined. The Apply button assigns that sound to all the visible rows in the table. If any visible rows already have a sound assigned, it overwrites those assignments.\nThe Defined and Undefined buttons are additional filters: toggling Defined off hides all the rows that have a sound already assigned. Similarly, toggling Undefined off hides rows where no sound has been assigned. One use for these toggles is to avoid overwriting existing assignments.\nIf you assign the blank sound (\u0026quot;\u0026mdash;\u0026quot;) to a combination, that combination will not be written to the expression map at all.\n"},{"id":16,"href":"/doc/docs/tool/workflow/","title":"Workflow","section":"Expression-map Builder","content":"Work flow #  A few hints about work flow.\nSaving your work #  Your work is saved right away. As soon as you fill in a field, it\u0026rsquo;s stored (in the cloud). The downside of this is that you need an internet connection to use Fugalist. You can stop working on a project and come back to it later\u0026mdash;even on another device\u0026mdash;and pick up where you left off.\nTab Flipping #  You definitely don\u0026rsquo;t have to work your way left-to-right through the project tabs. Flipping back and forth works fine: add a few VST sounds, assign them, download an expression map to try it out. Add more VST sounds, assign them, download again and try that out. Repeat until the air vibrates in interesting ways.\nSound Assignment Strategies #  One way to do sound assignment is to pick the most common sound\u0026mdash;probably a sustain\u0026mdash;and start by assigning it to all combinations in the table. Then override specific exceptions, by toggling technique filters or by surgically changing particular rows.\nAnother way is to try to assign sounds correctly the first time. If you do this, toggling the Defined filter to off is really handy. With this filter off, you never accidentally override previous work.\nUndo #  Unfortunately, Fugalist doesn\u0026rsquo;t have undo. At least not yet. Sorry.\n"},{"id":17,"href":"/doc/docs/introduction/notation/","title":"Notation","section":"Introduction","content":"Music Notation #  Western music notation starts with staffs, clefs, and notes. Then it gets complicated. For hundreds of years, people have been adding new symbols and annotations to music notation to better express how the music is intended to sound.\nDorico supports pretty much any notation you can imagine. Hundreds of notations are built in, and you can create your own if you need to. During playback, Dorico does an amazing job of keeping track of all the notations that apply to a particular note. It boils them down into a pitch, a duration, a volume, and set of \u0026ldquo;playing techniques\u0026rdquo;. But what Dorico needs to play a note is a series of MIDI events to send to a VST instrument.\nThat\u0026rsquo;s where expression maps come in. An expression map takes in all the information that Dorico has about a note (pitch, duration, volume, and playing techniques) and maps it to a series of MIDI signals that Dorico then sends to the VST instrument.\n"},{"id":18,"href":"/doc/docs/tool/composite-tab/fields/","title":"Fields","section":"Composite Sounds","content":"Fields #  Name #  Give your composite sound a name.\nCondition #  The condition determines which branch of the composite sound to use for a particular note. In the example above, the first branch is used if the note length (as computed by Dorico) is less than short. The second branch is used otherwise. That means that short notes will use your staccato patch, and longer notes use the sustain patch.\nThe syntax for conditions is described here.\nLength #  Enter a percentage if you want to adjust the note length.\nRemember that Dorico already modifies notated note lengths if certain playing techniques are active.  Transpose #  Enter a number (positive or negative) to transpose up or down by octaves.\nVST Sound #  Select the VST sound to use for this branch. In the example above, short notes are played with the staccato sound and longer notes played with the sustain sound. Both of those are defined in the VST sounds tab.\n"},{"id":19,"href":"/doc/docs/tool/composite-tab/condition-syntax/","title":"Condition Syntax","section":"Composite Sounds","content":"How to Write Conditions #  Fugalist is pretty flexible about how to write conditions. You can use comparison operators to combine the actual note length (NoteLength) and Dorico\u0026rsquo;s predefined note lengths.\nExamples of simple comparisons:\nNoteLength \u0026lt;= veryShort note length \u0026lt;= very short very short \u0026lt; note length  Dorico\u0026rsquo;s predefined note lengths:\n very short 0.1875 seconds, or a dotted 16th note at 120bpm short 0.375 seconds, or a dotted 8th note at 120bpm medium 0.75 seconds, or a dotted quarter note at 120bpm long 1.5 seconds, or a dotted half note at 120bpm   Comparison operators:\n \u0026lt;= \u0026lt; \u0026gt;= \u0026gt; == !=   You can combine simple comparisons with and. Examples:\nNoteLength \u0026gt; short and NoteLength \u0026lt; long very short \u0026lt; note length AND note length \u0026lt; long  Note-length ranges arise frequently; Fugalist provides a short-cut. The following two examples are equivalent:\nshort \u0026lt; note length \u0026lt;= long short \u0026lt; NoteLength AND note length \u0026lt;= long  Fugalist checks the syntax of your conditions, but it doesn\u0026rsquo;t try to ensure that they make sense.\nIf you write\nshortt \u0026lt; note length  Fugalist will tell you that \u0026ldquo;shortt\u0026rdquo; isn\u0026rsquo;t something it understands.\nBut (currently at least) Fugalist doesn\u0026rsquo;t make any attempt to determine whether your conditions actually make sense. For example, if one of your conditions is\nNoteLength \u0026lt; short and Notelength \u0026gt; long  Fugalist will happily put that in your expression map in spite of the fact that it can never actually be true.\n Empty Condition #  An empty condition is always true. That\u0026rsquo;s useful if you just want to adjust length or octave transposition for one of your VST sounds without paying attention to note length.\n"},{"id":20,"href":"/doc/docs/introduction/how-its-used/","title":"How Dorico Uses an Expression Map","section":"Introduction","content":"How does Dorico use an expression map? #  For each note in a score, Dorico computes the pitch, duration, volume, and the set of playing techniques that are active.\nDorico itself takes care of pitch and duration for the most part, so you usually don\u0026rsquo;t need to worry too much about them.\nHowever, you can adjust Dorico\u0026rsquo;s durations if you need to.  Dorico needs a little help with the volume. Basically, it needs to know whether volume is controlled by note velocity or by a MIDI CC and\u0026mdash;if it\u0026rsquo;s controlled by a MIDI CC\u0026mdash;which one. Once you tell it that, Dorico does the rest.\nSo main job of the expression map is to figure out what to do with the playing techniques. Dorico uses the set of active playing techniques for the note, plus (optionally) the note duration, to find an expression map entry. Then it reads from the expression map entry the following:\n On events: a sequence of MIDI events to send before the note is played Off events: a sequence of MIDI events to send after the note is played (rarely needed, in my experience) Volume dynamic: A specification of how to control the volume of the note. The volume of a VST instrument can be controlled either by using the note velocity, or by some continuous controller (CC). Length adjustment: an adjustment to the note length (percentage). Tranposition: an adjustment to the note pitch in case the library is in a different octave.  So, in a sense, an expression map is a very simple thing. It\u0026rsquo;s just a big look-up table, with one row for each combination of playing techniques. Once Dorico finds the right row, it reads the on events, off events, etc., and uses them to play the note.\n"},{"id":21,"href":"/doc/docs/introduction/example/","title":"Tiny Example","section":"Introduction","content":"Tiny Example #  To be concrete, suppose we want to support the following playing techniques:\n Normal and tenuto lengths Normal and legato note connections Normal and pizzicato technique  Here\u0026rsquo;s a complete table of sensible combinations, eight in all:\n   Length Legato Technique on off vol etc     Normal Normal Normal       Normal Normal Pizz       Normal Legato Normal       Normal Legato Pizz       Tenuto Normal Normal       Tenuto Normal Pizz       Tenuto Legato Normal       Tenuto Legato Pizz        What remains is to fill in the blanks: specify on events, off events, etc., for each combination. The Fugalist expression-map tool is designed to do exactly that.\n"},{"id":22,"href":"/doc/docs/introduction/problem/","title":"So What's the Problem?","section":"Introduction","content":"What\u0026rsquo;s the problem? #  This all seems pretty straightforward: figure out which playing techniques to support. Then create a table with one row for each combination of playing techniques. Assign on events, off events, etc., for each row.\nThe problem is scale. Suppose you want to support\n five note articulations (normal, staccato, staccatissimo, tenuto, and staccato-tenuto), normal and legato note transitions normal and marcato attack, and normal and non- vibrato normal, pizzicato, sul tasto, and sul pont.  That\u0026rsquo;s 15 playing techniques, which means\n2^15 = 32768  table entries if you allow any combination.\nLuckily, the vast majority of combinations don\u0026rsquo;t make any sense. A note can\u0026rsquo;t be marked both legato and non-legato at the same time, nor can it be marked both staccato and staccatissimo. So we can do much better by noticing that it only makes sense to pick one playing technique from each of the numbered sets. That leaves\n5 * 2 * 2 * 2 * 3 = 120  sensible combinations. Still quite a few, but more manageable.\nThat\u0026rsquo;s the problem the Fugalist expression-map builder attacks.\n"}]